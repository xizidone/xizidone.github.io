{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Xizi","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2023-01-07T09:45:53.000Z","updated":"2023-01-07T09:46:20.812Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringBoot实现文件上传下载功能","slug":"SpringBoot实现文件上传下载功能","date":"2023-01-07T10:34:29.102Z","updated":"2023-01-07T10:37:08.398Z","comments":true,"path":"2023/01/07/SpringBoot实现文件上传下载功能/","link":"","permalink":"http://example.com/2023/01/07/SpringBoot%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/","excerpt":"","text":"配置和前端页面 maven配置文件 &lt;dependencies&gt; &lt;!-- web模块 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- thymeleaf 模板引擎 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 前端页面 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\" xmlns:th=\"http://www.w3.org/1999/xhtml\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/3.5.0/jquery.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h3&gt;文件上传&lt;/h3&gt; &lt;!--文件上传要求form表单的请求方式必须为post，并且添加属性enctype=\"multipart/form-data\"--&gt; &lt;form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\"&gt; &lt;input type=\"file\" name=\"file\" &gt; &lt;br&gt; &lt;input type=\"submit\" value=\"上传\" &gt; &lt;/form&gt; [[${filename}]] &lt;br&gt; &lt;!--渲染上传的图片--&gt; &lt;img th:src=\"@{${filename}}\" alt=\"图片\" id=\"imgss\"&gt; &lt;h3&gt;文件下载&lt;/h3&gt; &lt;form action=\"/download\" method=\"get\"&gt; &lt;input type=\"hidden\" name=\"imageName\" id=\"imageName\" th:value=\"${filename}\"/&gt; &lt;input type = \"submit\" value=\"点击图片下载\" &gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; webconfig配置 @Configuration public class MyWebAppConfigurer implements WebMvcConfigurer { @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { // 用于前端匹配路径 /AAA-uploaded/** 的时候 可以直接定位到D://AAA-uploaded/图片存储的地址 // 用于前端页面渲染图片 registry.addResourceHandler(\"/AAA-uploaded/**\"). addResourceLocations(\"file:/\" + \"D://AAA-uploaded/\"); } } yaml配置文件 server: port: 8080 my-config: file-path: D:\\ 文件上传功能 MultipartFile接收前端传来的文件 @Value(\"${my-config.file-path}\") private String myFilePath; @RequestMapping(\"upload\") public String upload(@RequestParam(\"file\") MultipartFile file, Model model) { try { // 避免图片名字重复 采用时间戳+图片名 String fileName = System.currentTimeMillis() + file.getOriginalFilename(); // 获取图片存放路径 String destFileName = myFilePath + \"AAA-uploaded\" + File.separator + fileName; File destFile = new File(destFileName); // 判断上一级目录是否存在 不存在则创建 if (!destFile.getParentFile().exists()) { destFile.getParentFile().mkdirs(); } // 移动文件到指定目录下 file.transferTo(destFile); // 存放到页面用于回显测试 model.addAttribute(\"filename\", \"AAA-uploaded/\" + fileName); } catch (Exception e) { e.printStackTrace(); return \"上传失败,\" + e.getMessage(); } return \"index\"; } 文件下载功能 ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文 @Value(\"${my-config.file-path}\") private String myFilePath; @ResponseBody @RequestMapping(\"/download\") public ResponseEntity&lt;byte[]&gt; testResponseEntity(@RequestParam(value = \"imageName\", required = false) String filename) throws IOException { // 获取图片名称返回给页面用于下载 String name = filename.split(\"/\")[1]; File newfile = new File(\"D:/AAA-uploaded\" + File.separator + name); if (!newfile.exists()) { throw new IOException(name + \"文件不存在\"); } // 创建输入流 InputStream is = new FileInputStream(newfile); // 创建字节数组 byte[] bytes = new byte[is.available()]; // 将流读到字节数组中 is.read(bytes); // 创建HttpHeaders对象设置响应头信息 MultiValueMap&lt;String, String&gt; headers = new HttpHeaders(); // 设置要下载方式以及下载文件的名字 headers.add(\"Content-Disposition\", \"attachment;filename=\"+ name); // 设置响应状态码 HttpStatus statusCode = HttpStatus.OK; // 创建ResponseEntity对象 ResponseEntity&lt;byte[]&gt; responseEntity = new ResponseEntity&lt;&gt;(bytes, headers, statusCode); // 关闭输入流 is.close(); return responseEntity; }","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://example.com/categories/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://example.com/tags/SpringBoot/"}]},{"title":"Jackson序列化方式实现数据脱敏","slug":"Jackson序列化方式实现数据脱敏","date":"2023-01-07T10:25:52.011Z","updated":"2023-01-07T10:37:08.403Z","comments":true,"path":"2023/01/07/Jackson序列化方式实现数据脱敏/","link":"","permalink":"http://example.com/2023/01/07/Jackson%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/","excerpt":"","text":"方案选择 基于Mybatis 的拦截器：对select 语句进行拦截数据脱敏，但是存在问题 在某些业务中对数据脱敏字段是需要进行逻辑业务处理的 基于Jaskson 序列化：针对需要展示在前端的数据 通常我们都是对应一个ＶＯ对象，这里可以在将ＶＯ对象返回给前端序列化时进行数据的脱敏 实现方案1.自定义序列化器 覆盖原来的序列化方式 需要引入jackson依赖 &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt; &lt;version&gt;2.11.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.11.0&lt;/version&gt; &lt;/dependency&gt; /** * 脱敏序列化器 */ public class ObjectDesensitizeSerializer extends StdSerializer&lt;Object&gt; implements ContextualSerializer { protected ObjectDesensitizeSerializer() { super(Object.class); } @Override public JsonSerializer&lt;Object&gt; createContextual(SerializerProvider prov, BeanProperty property) { // 这里创建序列化上下文环境 以选择是否需要指定返回不同的序列化器 return serializer; } @Override public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { // 这里编写实际序列化的字段的处理 } } 2.定义策略类(处理实际脱敏逻辑)然后针对不同的字段会有不同的脱敏方案 比如 身份证号 银行卡号 电话号码等 这里采用 策略模式 + 工厂模式 进行解耦，符合开闭原则 定义一个顶级接口 然后多个实现 /** * 定义一个 顶级的脱敏器 */ public interface Desensitization&lt;T&gt; { /** * 脱敏实现 * * @param target 脱敏对象 * @return 脱敏返回结果 */ T desensitize(T target); } // 多接口实现 /** * 字符串脱敏器 */ public interface StringDesensitization extends Desensitization&lt;String&gt; { } /** * 身份证(18位和15位) 脱敏器 */ public class IDCardDesensitization implements StringDesensitization { } /** * 邮箱脱敏器 默认只保留域名 */ public class EmailDesensitization implements StringDesensitization { } 这里只展示具体的一个脱敏实现 其他都是类似 /** * 手机号脱敏器 默认只保留前3位和后4位 */ public class PhoneDesensitization implements StringDesensitization { /** * 手机号正则 */ private static final Pattern DEFAULT_PATTERN = Pattern.compile(\"(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\\\\d{8}\"); /** * 手机号脱敏 只保留前3位和后4位 */ @Override public String desensitize(String target) { // 匹配判断是否符合正则 Matcher matcher = DEFAULT_PATTERN.matcher(target); while (matcher.find()) { String group = matcher.group(); // 调用方法进行脱敏 target = target.replace(group, group.substring(0, 3) + Symbol.getSymbol(4, Symbol.STAR) + group.substring(7, 11)); } return target; } } public class Symbol { /** * '*'脱敏符 */ public static final String STAR = \"*\"; private Symbol() { } /** * 获取符号 * * @param number 符号个数 * @param symbol 符号 */ public static String getSymbol(int number, String symbol) { StringBuilder sb = new StringBuilder(); for (int i = 0; i &lt; number; i++) { sb.append(symbol); } return sb.toString(); } } 3.定义工厂类 获取实际策略 并缓存策略上述是 策略模式的体现 ，策略模式 通常结合工厂模式 屏蔽创建对象细节 直接通过工厂创建指定的策略类 /** *策略类的工厂 */ public class DesensitizationFactory { private DesensitizationFactory() { } // 这里采用一个 Map 集合 对指定的策略类进行缓存 避免对象的重复创建 private static final Map&lt;Class&lt;?&gt;, Desensitization&lt;?&gt;&gt; map = new HashMap&lt;&gt;(); @SuppressWarnings(\"all\") public static Desensitization&lt;?&gt; getDesensitization(Class&lt;?&gt; clazz) { // 如果传递的只是接口 不是实现类 则抛出异常 if (clazz.isInterface()) { throw new UnsupportedOperationException(\"desensitization is interface, what is expected is an implementation class !\"); } return map.computeIfAbsent(clazz, k -&gt; { try { // 返回指定 Class 的策略类 同时缓存在 Map 中 return (Desensitization&lt;?&gt;) clazz.newInstance(); } catch (InstantiationException | IllegalAccessException e) { throw new UnsupportedOperationException(e.getMessage(), e); } }); } } 4.定义注解 简化使用然后就是注解的定义，利用注解 直接对 VO 对象的字段标记，无代码入侵 /** * 对象脱敏 注解 */ @Target({ElementType.FIELD, ElementType.ANNOTATION_TYPE}) // 作用于注解类型上 供其他注解使用 @Retention(RetentionPolicy.RUNTIME) @JacksonAnnotationsInside // 组合注解 将多个注解拼在一起使用 @JsonSerialize(using = ObjectDesensitizeSerializer.class) // 标记序列化配置中 使用哪个类序列化 这里指定之前定义的ObjectDesensitizeSerializer @Documented public @interface Desensitize { // 这里对应了工厂类中的Class类型 以及在 ObjectDesensitizeSerializer 中创建上下文环境时 可供获取的参数去选择实际的脱敏方式 /** * 对象脱敏器实现 */ @SuppressWarnings(\"all\") Class&lt;? extends Desensitization&lt;?&gt;&gt; desensitization(); } 然后就是对应的实际字段注解 /** * 电话脱敏 注解 */ @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @JacksonAnnotationsInside @Desensitize(desensitization = PhoneDesensitization.class) // 这里指定执行脱敏逻辑的类 @Documented public @interface PhoneDesensitize { } /** * 中华人民共和国身份证 脱敏注解 */ @Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @JacksonAnnotationsInside @Desensitize(desensitization = IDCardDesensitization.class) // 这里指定执行脱敏逻辑的类 @Documented public @interface IDCardDesensitize { } 5.完善自定义序列化器的逻辑最后就是回到开头 编写实际的 自定义序列化器 ** * 脱敏序列化器 */ public class ObjectDesensitizeSerializer extends StdSerializer&lt;Object&gt; implements ContextualSerializer { // 面向接口 根据策略不同而实际 set 不同的 脱敏类 private transient Desensitization&lt;Object&gt; desensitization; protected ObjectDesensitizeSerializer() { super(Object.class); } public Desensitization&lt;Object&gt; getDesensitization() { return desensitization; } public void setDesensitization(Desensitization&lt;Object&gt; desensitization) { this.desensitization = desensitization; } // 创建上下文环境 @Override public JsonSerializer&lt;Object&gt; createContextual(SerializerProvider prov, BeanProperty property) { // 根据 BeanProperty 获取被标记 VO 字段的注解上的 实际策略脱敏类 Desensitize annotation = property.getAnnotation(Desensitize.class); return createContextual(annotation.desensitization()); } @SuppressWarnings(\"unchecked\") public JsonSerializer&lt;Object&gt; createContextual(Class&lt;? extends Desensitization&lt;?&gt;&gt; clazz) { ObjectDesensitizeSerializer serializer = new ObjectDesensitizeSerializer(); // 判断是否属于 StringDesensitization 因为 StringDesensitization 属于全脱敏 if (clazz != StringDesensitization.class) { // 不属于则 回到上面 通过工厂类去创建脱敏类 serializer.setDesensitization((Desensitization&lt;Object&gt;) DesensitizationFactory.getDesensitization(clazz)); } return serializer; } // 创建完 上下文环境 返回 serializer 执行序列化 serialize @Override public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Desensitization&lt;Object&gt; objectDesensitization = getDesensitization(); // 获取 策略类（即 前面 set 的 desensitization） if (objectDesensitization != null) { try { // 不为空调用处理脱敏逻辑 gen.writeObject(objectDesensitization.desensitize(value)); } catch (Exception e) { gen.writeObject(value); } } else if (value instanceof String) { // 为空 说明是 StringDesensitization 且字段是 String 类型 则 全脱敏 gen.writeString(Symbol.getSymbol(((String) value).length(), Symbol.STAR)); } else { // 否则 正常序列化 gen.writeObject(value); } } } 最终可达到 一个注解 即可脱敏","categories":[{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"三方包","slug":"三方包","permalink":"http://example.com/tags/%E4%B8%89%E6%96%B9%E5%8C%85/"},{"name":"自定义注解","slug":"自定义注解","permalink":"http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"}]}],"categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://example.com/categories/SpringBoot/"},{"name":"Java","slug":"Java","permalink":"http://example.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://example.com/tags/SpringBoot/"},{"name":"三方包","slug":"三方包","permalink":"http://example.com/tags/%E4%B8%89%E6%96%B9%E5%8C%85/"},{"name":"自定义注解","slug":"自定义注解","permalink":"http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"}]}