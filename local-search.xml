<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/08/21/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/08/21/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">代码块<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>底层原理</tag>
      
      <tag>Java8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot实现文件上传下载功能</title>
    <link href="/2022/12/23/SpringBoot%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/"/>
    <url>/2022/12/23/SpringBoot%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="配置和前端页面"><a href="#配置和前端页面" class="headerlink" title="配置和前端页面"></a>配置和前端页面</h2><ul><li>maven配置文件</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  web模块      --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  thymeleaf 模板引擎      --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>前端页面</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/jquery/3.5.0/jquery.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-comment">&lt;!--文件上传要求form表单的请求方式必须为post，并且添加属性enctype="multipart/form-data"--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/upload"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"file"</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"上传"</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>[[${filename}]]<br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-comment">&lt;!--渲染上传的图片--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@{${filename}}"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"图片"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"imgss"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>文件下载<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/download"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"imageName"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"imageName"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"${filename}"</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">"submit"</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">"点击图片下载"</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><ul><li>webconfig配置</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWebAppConfigurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> {<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> {<br>        <br>        <span class="hljs-comment">//  用于前端匹配路径 /AAA-uploaded/** 的时候 可以直接定位到D://AAA-uploaded/图片存储的地址</span><br>        <span class="hljs-comment">//  用于前端页面渲染图片</span><br>        registry.addResourceHandler(<span class="hljs-string">"/AAA-uploaded/**"</span>).<br>                addResourceLocations(<span class="hljs-string">"file:/"</span> + <span class="hljs-string">"D://AAA-uploaded/"</span>);<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>yaml配置文件</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-attr">my-config:</span><br>  <span class="hljs-attr">file-path:</span> <span class="hljs-string">D:\</span><br></code></pre></td></tr></tbody></table></figure><h2 id="文件上传功能"><a href="#文件上传功能" class="headerlink" title="文件上传功能"></a>文件上传功能</h2><blockquote><p>MultipartFile接收前端传来的文件</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value("${my-config.file-path}")</span><br>    <span class="hljs-keyword">private</span> String myFilePath;<br><br>    <span class="hljs-meta">@RequestMapping("upload")</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam("file")</span> MultipartFile file, Model model)</span> {<br>        <span class="hljs-keyword">try</span> {<br>            <span class="hljs-comment">//  避免图片名字重复 采用时间戳+图片名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> System.currentTimeMillis() + file.getOriginalFilename();<br>            <span class="hljs-comment">//  获取图片存放路径</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">destFileName</span> <span class="hljs-operator">=</span> myFilePath + <span class="hljs-string">"AAA-uploaded"</span> + File.separator + fileName;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(destFileName);<br>            <span class="hljs-comment">//  判断上一级目录是否存在 不存在则创建</span><br>            <span class="hljs-keyword">if</span> (!destFile.getParentFile().exists()) {<br>                destFile.getParentFile().mkdirs();<br>            }<br>            <span class="hljs-comment">//  移动文件到指定目录下</span><br>            file.transferTo(destFile);<br>            <span class="hljs-comment">//  存放到页面用于回显测试</span><br>            model.addAttribute(<span class="hljs-string">"filename"</span>, <span class="hljs-string">"AAA-uploaded/"</span> + fileName);<br>        } <span class="hljs-keyword">catch</span> (Exception e) {<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"上传失败,"</span> + e.getMessage();<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;<br>    }<br></code></pre></td></tr></tbody></table></figure><h2 id="文件下载功能"><a href="#文件下载功能" class="headerlink" title="文件下载功能"></a>文件下载功能</h2><blockquote><p> ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value("${my-config.file-path}")</span><br>    <span class="hljs-keyword">private</span> String myFilePath;<br><span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping("/download")</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testResponseEntity(<span class="hljs-meta">@RequestParam(value = "imageName", required = false)</span> String filename) <span class="hljs-keyword">throws</span> IOException {<br>        <span class="hljs-comment">//  获取图片名称返回给页面用于下载</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> filename.split(<span class="hljs-string">"/"</span>)[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">File</span> <span class="hljs-variable">newfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">"D:/AAA-uploaded"</span> + File.separator + name);<br>        <span class="hljs-keyword">if</span> (!newfile.exists()) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(name + <span class="hljs-string">"文件不存在"</span>);<br>        }<br>        <span class="hljs-comment">//  创建输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(newfile);<br>        <span class="hljs-comment">//  创建字节数组</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br>        <span class="hljs-comment">//  将流读到字节数组中</span><br>        is.read(bytes);<br>        <span class="hljs-comment">//  创建HttpHeaders对象设置响应头信息</span><br>        MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        <span class="hljs-comment">//  设置要下载方式以及下载文件的名字</span><br>        headers.add(<span class="hljs-string">"Content-Disposition"</span>, <span class="hljs-string">"attachment;filename="</span>+ name);<br>        <span class="hljs-comment">//  设置响应状态码</span><br>        <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br>        <span class="hljs-comment">//  创建ResponseEntity对象</span><br>        ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);<br>        <span class="hljs-comment">//  关闭输入流</span><br>        is.close();<br>        <span class="hljs-keyword">return</span> responseEntity;<br>    }<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jackson序列化方式实现数据脱敏</title>
    <link href="/2022/08/21/Jackson%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/"/>
    <url>/2022/08/21/Jackson%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E8%84%B1%E6%95%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h2><ul><li>基于Mybatis 的拦截器：对select 语句进行拦截数据脱敏，但是存在问题 在某些业务中对数据脱敏字段是需要进行逻辑业务处理的</li><li>基于Jaskson 序列化：针对需要展示在前端的数据 通常我们都是对应一个ＶＯ对象，这里可以在将ＶＯ对象返回给前端序列化时进行数据的脱敏</li></ul><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h4 id="1-自定义序列化器-覆盖原来的序列化方式"><a href="#1-自定义序列化器-覆盖原来的序列化方式" class="headerlink" title="1.自定义序列化器 覆盖原来的序列化方式"></a>1.自定义序列化器 覆盖原来的序列化方式</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">需要引入jackson依赖<br>     &lt;dependency&gt;<br>            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>            &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.11</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.11</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 脱敏序列化器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectDesensitizeSerializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">StdSerializer</span>&lt;Object&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ContextualSerializer</span> {<br><br>   <br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ObjectDesensitizeSerializer</span><span class="hljs-params">()</span> {<br>        <span class="hljs-built_in">super</span>(Object.class);<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JsonSerializer&lt;Object&gt; <span class="hljs-title function_">createContextual</span><span class="hljs-params">(SerializerProvider prov, BeanProperty property)</span> {<br>        <br>        <span class="hljs-comment">//  这里创建序列化上下文环境 以选择是否需要指定返回不同的序列化器</span><br>        <br>        <br>        <span class="hljs-keyword">return</span> serializer;<br>    }<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object value, JsonGenerator gen, SerializerProvider provider)</span> <span class="hljs-keyword">throws</span> IOException {<br>       <br>        <span class="hljs-comment">//  这里编写实际序列化的字段的处理</span><br>        <br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="2-定义策略类-处理实际脱敏逻辑"><a href="#2-定义策略类-处理实际脱敏逻辑" class="headerlink" title="2.定义策略类(处理实际脱敏逻辑)"></a>2.定义策略类(处理实际脱敏逻辑)</h4><p>然后针对不同的字段会有不同的脱敏方案 比如 身份证号 银行卡号 电话号码等</p><p>这里采用 <strong>策略模式 + 工厂模式</strong> 进行解耦，符合开闭原则</p><p>定义一个顶级接口 然后多个实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义一个 顶级的脱敏器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Desensitization</span>&lt;T&gt; {<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 脱敏实现</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target 脱敏对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 脱敏返回结果</span><br><span class="hljs-comment">     */</span><br>    T <span class="hljs-title function_">desensitize</span><span class="hljs-params">(T target)</span>;<br><br>}<br><br><span class="hljs-comment">//  多接口实现</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串脱敏器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StringDesensitization</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Desensitization</span>&lt;String&gt; {<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 身份证(18位和15位) 脱敏器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IDCardDesensitization</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StringDesensitization</span> {<br>}<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 邮箱脱敏器 默认只保留域名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmailDesensitization</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StringDesensitization</span> {<br>}<br><br></code></pre></td></tr></tbody></table></figure><blockquote><p>这里只展示具体的一个脱敏实现 其他都是类似</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 手机号脱敏器 默认只保留前3位和后4位</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneDesensitization</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StringDesensitization</span> {<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手机号正则</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">DEFAULT_PATTERN</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">"(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\\d{8}"</span>);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手机号脱敏 只保留前3位和后4位</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">desensitize</span><span class="hljs-params">(String target)</span> {<br>        <span class="hljs-comment">//  匹配判断是否符合正则</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> DEFAULT_PATTERN.matcher(target);<br>        <span class="hljs-keyword">while</span> (matcher.find()) {<br>            <span class="hljs-type">String</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> matcher.group();<br>            <br>            <span class="hljs-comment">//  调用方法进行脱敏</span><br>            target = target.replace(group, group.substring(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>) + Symbol.getSymbol(<span class="hljs-number">4</span>, Symbol.STAR) + group.substring(<span class="hljs-number">7</span>, <span class="hljs-number">11</span>));<br>        }<br>        <span class="hljs-keyword">return</span> target;<br>    }<br>}<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Symbol</span> {<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * '*'脱敏符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">STAR</span> <span class="hljs-operator">=</span> <span class="hljs-string">"*"</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Symbol</span><span class="hljs-params">()</span> {<br><br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取符号</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> number 符号个数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> symbol 符号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSymbol</span><span class="hljs-params">(<span class="hljs-type">int</span> number, String symbol)</span> {<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; number; i++) {<br>            sb.append(symbol);<br>        }<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="3-定义工厂类-获取实际策略-并缓存策略"><a href="#3-定义工厂类-获取实际策略-并缓存策略" class="headerlink" title="3.定义工厂类 获取实际策略 并缓存策略"></a>3.定义工厂类 获取实际策略 并缓存策略</h4><p>上述是 <strong>策略模式</strong>的体现 ，策略模式 通常结合工厂模式 屏蔽创建对象细节 直接通过工厂创建指定的策略类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *策略类的工厂</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DesensitizationFactory</span> {<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">DesensitizationFactory</span><span class="hljs-params">()</span> {<br>    }<br><br>    <span class="hljs-comment">//  这里采用一个 Map 集合 对指定的策略类进行缓存 避免对象的重复创建</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Class&lt;?&gt;, Desensitization&lt;?&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <br>    <span class="hljs-meta">@SuppressWarnings("all")</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Desensitization&lt;?&gt; getDesensitization(Class&lt;?&gt; clazz) {<br>        <span class="hljs-comment">//  如果传递的只是接口 不是实现类 则抛出异常</span><br>        <span class="hljs-keyword">if</span> (clazz.isInterface()) {<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">"desensitization is interface, what is expected is an implementation class !"</span>);<br>        }<br>        <span class="hljs-keyword">return</span> map.computeIfAbsent(clazz, k -&gt; {<br>            <span class="hljs-keyword">try</span> {<br>                <span class="hljs-comment">//  返回指定 Class 的策略类 同时缓存在 Map 中</span><br>                <span class="hljs-keyword">return</span> (Desensitization&lt;?&gt;) clazz.newInstance();<br>            } <span class="hljs-keyword">catch</span> (InstantiationException | IllegalAccessException e) {<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(e.getMessage(), e);<br>            }<br>        });<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="4-定义注解-简化使用"><a href="#4-定义注解-简化使用" class="headerlink" title="4.定义注解 简化使用"></a>4.定义注解 简化使用</h4><p>然后就是注解的定义，利用注解 直接对 VO 对象的字段标记，无代码入侵</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对象脱敏 注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target({ElementType.FIELD, ElementType.ANNOTATION_TYPE})</span> <span class="hljs-comment">// 作用于注解类型上 供其他注解使用</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@JacksonAnnotationsInside</span>  <span class="hljs-comment">//  组合注解 将多个注解拼在一起使用</span><br><span class="hljs-meta">@JsonSerialize(using = ObjectDesensitizeSerializer.class)</span> <span class="hljs-comment">//  标记序列化配置中 使用哪个类序列化 这里指定之前定义的ObjectDesensitizeSerializer</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Desensitize {<br>    <br>    <span class="hljs-comment">//  这里对应了工厂类中的Class类型 以及在 ObjectDesensitizeSerializer 中创建上下文环境时 可供获取的参数去选择实际的脱敏方式</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对象脱敏器实现</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings("all")</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Desensitization</span>&lt;?&gt;&gt; desensitization();<br><br><br>}<br></code></pre></td></tr></tbody></table></figure><p>然后就是对应的实际字段注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 电话脱敏 注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target({ElementType.FIELD})</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@JacksonAnnotationsInside</span><br><span class="hljs-meta">@Desensitize(desensitization = PhoneDesensitization.class)</span>  <span class="hljs-comment">//  这里指定执行脱敏逻辑的类</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> PhoneDesensitize {<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中华人民共和国身份证 脱敏注解</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target({ElementType.FIELD})</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@JacksonAnnotationsInside</span><br><span class="hljs-meta">@Desensitize(desensitization = IDCardDesensitization.class)</span> <span class="hljs-comment">//  这里指定执行脱敏逻辑的类</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> IDCardDesensitize {<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="5-完善自定义序列化器的逻辑"><a href="#5-完善自定义序列化器的逻辑" class="headerlink" title="5.完善自定义序列化器的逻辑"></a>5.完善自定义序列化器的逻辑</h4><p>最后就是回到开头 编写实际的 自定义序列化器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java">**<br> * 脱敏序列化器<br> */<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectDesensitizeSerializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">StdSerializer</span>&lt;Object&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ContextualSerializer</span> {<br>    <br>    <br><span class="hljs-comment">//  面向接口 根据策略不同而实际 set 不同的 脱敏类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Desensitization&lt;Object&gt; desensitization;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ObjectDesensitizeSerializer</span><span class="hljs-params">()</span> {<br>        <span class="hljs-built_in">super</span>(Object.class);<br>    }<br><br>    <span class="hljs-keyword">public</span> Desensitization&lt;Object&gt; <span class="hljs-title function_">getDesensitization</span><span class="hljs-params">()</span> {<br>        <span class="hljs-keyword">return</span> desensitization;<br>    }<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesensitization</span><span class="hljs-params">(Desensitization&lt;Object&gt; desensitization)</span> {<br>        <span class="hljs-built_in">this</span>.desensitization = desensitization;<br>    }<br><br>    <span class="hljs-comment">//  创建上下文环境</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JsonSerializer&lt;Object&gt; <span class="hljs-title function_">createContextual</span><span class="hljs-params">(SerializerProvider prov, BeanProperty property)</span> {<br>        <span class="hljs-comment">//  根据 BeanProperty 获取被标记 VO 字段的注解上的 实际策略脱敏类</span><br>        <span class="hljs-type">Desensitize</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> property.getAnnotation(Desensitize.class);<br>        <span class="hljs-keyword">return</span> createContextual(annotation.desensitization());<br>    }<br><br>    <span class="hljs-meta">@SuppressWarnings("unchecked")</span><br>    <span class="hljs-keyword">public</span> JsonSerializer&lt;Object&gt; <span class="hljs-title function_">createContextual</span><span class="hljs-params">(Class&lt;? extends Desensitization&lt;?&gt;&gt; clazz)</span> {<br>        <span class="hljs-type">ObjectDesensitizeSerializer</span> <span class="hljs-variable">serializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectDesensitizeSerializer</span>();<br>        <br>        <span class="hljs-comment">//  判断是否属于 StringDesensitization 因为 StringDesensitization 属于全脱敏</span><br>        <span class="hljs-keyword">if</span> (clazz != StringDesensitization.class) {<br>            <br>            <span class="hljs-comment">//  不属于则 回到上面 通过工厂类去创建脱敏类</span><br>            serializer.setDesensitization((Desensitization&lt;Object&gt;) DesensitizationFactory.getDesensitization(clazz));<br>        }<br>        <span class="hljs-keyword">return</span> serializer;<br>    }<br><br>    <br>    <span class="hljs-comment">//  创建完 上下文环境 返回 serializer 执行序列化 serialize</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object value, JsonGenerator gen, SerializerProvider provider)</span> <span class="hljs-keyword">throws</span> IOException {<br>        Desensitization&lt;Object&gt; objectDesensitization = getDesensitization();<br>        <br>        <span class="hljs-comment">//  获取 策略类（即 前面 set 的 desensitization）  </span><br>        <br>        <br>        <span class="hljs-keyword">if</span> (objectDesensitization != <span class="hljs-literal">null</span>) {<br>            <span class="hljs-keyword">try</span> {<br>                <span class="hljs-comment">//  不为空调用处理脱敏逻辑</span><br>                gen.writeObject(objectDesensitization.desensitize(value));<br>            } <span class="hljs-keyword">catch</span> (Exception e) {<br>                gen.writeObject(value);<br>            }<br>        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> String) {<br>            <span class="hljs-comment">//  为空 说明是 StringDesensitization  且字段是 String 类型 则 全脱敏</span><br>            gen.writeString(Symbol.getSymbol(((String) value).length(), Symbol.STAR));<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-comment">//  否则 正常序列化</span><br>            gen.writeObject(value);<br>        }<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>最终可达到 一个注解 即可脱敏</p></blockquote><p><img src="https://colorfulwp.oss-cn-beijing.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87/image-20220817172318562.png" alt="image-20220817172318562"></p>]]></content>
    
    
    <categories>
      
      <category>三方包</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义注解</tag>
      
      <tag>Java</tag>
      
      <tag>三方包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis的实现简易限流的两种方案(基于自定义注解+SpringBoot拦截器）</title>
    <link href="/2022/08/15/Redis%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E9%99%90%E6%B5%81%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%A1%88/"/>
    <url>/2022/08/15/Redis%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E9%99%90%E6%B5%81%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="一、基于Redis的-String-结构"><a href="#一、基于Redis的-String-结构" class="headerlink" title="一、基于Redis的 String 结构"></a>一、基于Redis的 String 结构</h2><p>这里为什么会想到实现这个功能，首先是前段时间看到有人恶意访问博客的评论接口，大量刷取评论，一秒钟请求了上千次写数据库的操作，由于博客网站也是比较简陋，果然项目只有跑起来的时候才是最舒服的，后续基本也没有维护(博客也基本没有再写了)，当时就只是把这几千条数据删除了。这几天看代码的时候，看到了Redis部分的代码，加上实习公司月度技术分享的时候 展示了一下自定义注解配合拦截器，让我想到也可以通过自定义注解 加 Redis 实现，顺便学习一波注解相关知识。</p><hr><p>先说一下最基本思路：使用Redis String 结构，key 存储用户ip，value 存储访问次数 配合一个过期时间，然后取出访问次数，超出访问次数就禁止访问。</p><p>代码实现：</p><h4 id="1-首先实现自定义注解"><a href="#1-首先实现自定义注解" class="headerlink" title="1.首先实现自定义注解"></a>1.首先实现自定义注解</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  三个元注解 </span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span>  <span class="hljs-comment">//  作用于方法上</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="hljs-comment">//  保留注解到运行时</span><br><span class="hljs-meta">@Documented</span>  <span class="hljs-comment">//  生产文档注解 (可忽略)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AccessLimit {<br><br>    <span class="hljs-comment">//  定义的两个注解参数</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 最大允许访问数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">maxCount</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单位时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">seconds</span><span class="hljs-params">()</span>;<br>}<br><span class="hljs-comment">//  使用 直接作用在方法上 填入参数</span><br><span class="hljs-meta">@AccessLimit(maxCount = 2,seconds = 20)</span><br></code></pre></td></tr></tbody></table></figure><h4 id="2-然后实现-SpringBoot-自带的-HandlerInterceptor-接口-这里也可以采用-AOP-的方式切入"><a href="#2-然后实现-SpringBoot-自带的-HandlerInterceptor-接口-这里也可以采用-AOP-的方式切入" class="headerlink" title="2.然后实现 SpringBoot 自带的 HandlerInterceptor 接口 (这里也可以采用 AOP 的方式切入)"></a>2.然后实现 SpringBoot 自带的 HandlerInterceptor 接口 (这里也可以采用 AOP 的方式切入)</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  标记为Spirng 组件</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> {<br><br>    <span class="hljs-comment">//  重写 preHandle 在方法执行之前拦截</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <br>        <span class="hljs-comment">//  等会这里重写逻辑</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="3-然后还需要将该拦截器添加到配置中"><a href="#3-然后还需要将该拦截器添加到配置中" class="headerlink" title="3.然后还需要将该拦截器添加到配置中"></a>3.然后还需要将该拦截器添加到配置中</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  采用配置类</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> {<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> WebSecurityInterceptor webSecurityInterceptor;<br><br>    <span class="hljs-comment">//  添加拦截器 (如果多个拦截器 会按照添加顺序进行拦截)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> {<br><br><br>        registry.addInterceptor(webSecurityInterceptor);<br>    }<br><br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="4-最后就是-实现-Redis-String-限流方案"><a href="#4-最后就是-实现-Redis-String-限流方案" class="headerlink" title="4.最后就是 实现 Redis String 限流方案"></a>4.最后就是 实现 Redis String 限流方案</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  在刚刚重写的方法中</span><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-comment">//  判断是否属于方法handler</span><br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) {<br>            <span class="hljs-comment">//  获取判断是否含有注解</span><br>            <span class="hljs-type">AccessLimit</span> <span class="hljs-variable">accessLimit</span> <span class="hljs-operator">=</span> ((HandlerMethod) handler).getMethodAnnotation(AccessLimit.class);<br>            <span class="hljs-comment">//  没有注解标记 直接返回允许通行</span><br>            <span class="hljs-keyword">if</span> (accessLimit == <span class="hljs-literal">null</span>) {<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            }<br>            <span class="hljs-comment">//  取出注解参数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">maxCount</span> <span class="hljs-operator">=</span> accessLimit.maxCount();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">seconds</span> <span class="hljs-operator">=</span> accessLimit.seconds();<br><br>            <span class="hljs-comment">//  获取当前访问用户的ip 实现对用户级别的限流</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> request.getRemoteAddr();<br>            <br>            <span class="hljs-comment">//  以访问路径和用户ip拼接key</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> request.getServletPath() + ip;<br><br>            <span class="hljs-comment">//  从redis 中获取当前用户记录</span><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> (Integer) redisTemplate.opsForValue().get(key);<br><br>            <span class="hljs-comment">//  如果第一次访问</span><br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-literal">null</span> || count == -<span class="hljs-number">1</span>) {<br>                <span class="hljs-comment">//  设置为一 并设置时间</span><br>                redisTemplate.opsForValue().set(key, <span class="hljs-number">1</span>, seconds, TimeUnit.SECONDS);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            }<br><br>            <span class="hljs-comment">//  如果小于 则直接加一</span><br>            <span class="hljs-keyword">if</span> (count &lt; maxCount) {<br>                redisTemplate.opsForValue().increment(key, <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            }<br><br>            <span class="hljs-comment">//  大于 限流 返回错误信息</span><br>            render(response, <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>().fail(<span class="hljs-string">"操作过于频繁,请稍后再试"</span>));<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给页面返回错误信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(HttpServletResponse response, R result)</span> {<br>        response.setContentType(<span class="hljs-string">"application/json; charset=utf-8"</span>);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> {<br>            out = response.getOutputStream();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> JSON.toJSONString(result);<br>            out.write(str.getBytes(StandardCharsets.UTF_8));<br>            out.flush();<br>            out.close();<br>        } <span class="hljs-keyword">catch</span> (IOException e) {<br>            e.printStackTrace();<br>     }<br></code></pre></td></tr></tbody></table></figure><h2 id="二、基于Redis-Zset-结构-以滑动窗口的方式-实现-单位时间内对-接口的限流"><a href="#二、基于Redis-Zset-结构-以滑动窗口的方式-实现-单位时间内对-接口的限流" class="headerlink" title="二、基于Redis Zset 结构 以滑动窗口的方式 实现 单位时间内对 接口的限流"></a>二、基于Redis Zset 结构 以滑动窗口的方式 实现 单位时间内对 接口的限流</h2><p>方案一中有缺陷，所以是针对 ip 进行限流，因为只能 当统计 1- 11秒的时候，没法统计 2-12 秒 就是没法统计 N 秒内 M 个请求(如果要做到 就需要多个key)</p><p>基本思路： 使用 Redis 的 Zset 因为 Zset 天然按照 score 进行排序，使用 methodName 作为 Key ，当前时间戳作为 score，在每次查询的时候 动态的维护时间窗口，将不属于 当面限制时间段内的数据给清除，统计属于当前时间段内的次数即可</p><p>具体看代码实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception {<br>        <span class="hljs-comment">//  判断是否属于方法handler</span><br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> HandlerMethod) {<br>            <span class="hljs-comment">//  获取判断是否含有注解</span><br>            <span class="hljs-type">AccessLimit</span> <span class="hljs-variable">accessLimit</span> <span class="hljs-operator">=</span> ((HandlerMethod) handler).getMethodAnnotation(AccessLimit.class);<br>            <span class="hljs-comment">//  没有注解标记 直接返回允许通行</span><br>            <span class="hljs-keyword">if</span> (accessLimit == <span class="hljs-literal">null</span>) {<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            }<br>            <span class="hljs-comment">//  获取 限流的参数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">maxCount</span> <span class="hljs-operator">=</span> accessLimit.maxCount();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">seconds</span> <span class="hljs-operator">=</span> accessLimit.seconds();<br>            <br>            这里区分和方案一不同<br>            ---------------<br>            <span class="hljs-comment">//  获取方法名 这里实现对方法级别的限制访问</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> ((HandlerMethod) handler).getMethod().getName();<br><br>            <span class="hljs-comment">//  获取当前时间戳</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">nowTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime();<br><br>            <span class="hljs-comment">//  设置方法访问的 时间戳</span><br>            redisTemplate.opsForZSet().add(methodName, nowTime + <span class="hljs-string">" "</span>, nowTime);<br><br>            <span class="hljs-comment">//  删除窗口之外的数据</span><br>            redisTemplate.opsForZSet().removeRangeByScore(methodName, <span class="hljs-number">0</span>, nowTime - seconds * <span class="hljs-number">1000</span>);<br><br>            <span class="hljs-comment">//  获取窗口内的访问次数</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForZSet().zCard(methodName);<br>            <br>            -----------------<br>                <br>            <span class="hljs-comment">//  如果超出访问限制 限流</span><br>            <span class="hljs-keyword">if</span> (count &gt; maxCount) {<br>                render(response, <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>().fail(<span class="hljs-string">"操作过于频繁,请稍后再试"</span>));<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            }<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>自定义注解</tag>
      
      <tag>限流</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
